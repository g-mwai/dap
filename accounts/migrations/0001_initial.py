# Generated by Django 3.2 on 2024-02-17 12:55

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('count', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('location', models.CharField(max_length=50)),
                ('birthday', models.DateField(default=datetime.date.today)),
                ('bio', models.TextField(max_length=150)),
                ('user_tokens', models.IntegerField(default=50)),
                ('is_verified', models.BooleanField(default=False)),
                ('industry', models.CharField(choices=[('technology', 'Technology'), ('finance', 'Finance'), ('healthcare', 'Healthcare'), ('manufacturing', 'Manufacturing'), ('retail', 'Retail'), ('hospitality', 'Hospitality'), ('blue collar', 'Blue Collar'), ('real estate', 'Real Estate'), ('energy', 'Energy'), ('non profit', 'Non Profit'), ('public service', 'Public Service'), ('transportation & logistics', 'Transportation & Logistics'), ('telecommunications', 'Telecommunications'), ('media & entertainment', 'Media & Entertainment'), ('construction & engineering', 'Construction & Engineering'), ('agriculture', 'Agriculture'), ('education', 'Education'), ('professional services', 'Professional Services')], default='energy', max_length=50)),
                ('avatar', models.ImageField(blank=True, default='profile_pics/default_avatar.jpg', null=True, upload_to='profile_pics/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='cover_image/')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('unspecified', 'Unspecified')], default='unspecified', max_length=50)),
                ('profile_type', models.CharField(choices=[('personal', 'Personal'), ('business', 'Business'), ('non profit', 'Non Profit'), ('government', 'Government')], default='personal', max_length=50)),
                ('ext_link', models.URLField(blank=True)),
                ('following', models.ManyToManyField(blank=True, related_name='followers', to='accounts.Profile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_portfolio', to='accounts.profile')),
            ],
        ),
        migrations.CreateModel(
            name='PasswordChangeRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=5, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
